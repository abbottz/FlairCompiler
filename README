README File for Flair Compiler

Written by Aaron Mangel
	   	   Zach Abbott
	       Zan Preston

Current State of Compiler
	
      >>scanner                   -- due Friday, February 10
      >>parser, step 1            -- due Friday, February 24
        parser, step 2            -- due Friday, March 9
        semantic checker          -- due Friday, March 30
        code generator, step 1    -- due Friday, April 13
        code generator, step 2    -- due Friday, April 27

Usage:
	javac driver.java  		        --To compile the compiler :-)
	java driver path/to/filename    --To execute where path/to/filename is path
				                      to your Flair Program



SCANNER
	The primary class for the scanner is CompilerStateScanner. It scans its input 
	on a by-character basis. It begins in a start state, and then determines if
	the following character is a valid state transition while also determining
	the type of token being created. Once an invalid state transition is
	detected, it breaks off what it has so far and attempts to make a valid
	token out of it	(i.e. check if it is a valid integer, identifier, etc.).

	LexicalException is thrown for an illegal token detected in the input
	Flair Program. When an exception is caught, an error message will be output
	to standard out, anything that was being read in at the time will be dropped
	and the scanner will attempt to continue reading until it reaches the end of
	the specified input file.

PARSER
	The primary class for the scanner is the CompilerParser. It reads the token
	stream that was generated by the scanner, considering each token against the
	parsing stack and a table which was built from the FIRST/FOLLOW sets for the
	Flair grammar. 
	
	The table used for the parsing is sparsely populated. Cells which correspond
	to an invalid combination are not filled. The table will be filled by loading
	a local file, parsingTable.dat, which should not be modified.
	
	ParsingException is thrown if the stream of tokens is different than what is
	expected by the grammar. When the exception is thrown, the program will
	display an error and close.